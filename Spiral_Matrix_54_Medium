public class Spiral_Matrix_54_Medium {
    public List<Integer> spiralOrder(int[][] matrix) {
        int c1=0,c2=matrix[0].length-1,r1=0,r2=matrix.length-1;
        ArrayList<Integer> res=new ArrayList<>();
        while(c1<=c2&&r1<=r2)
        {
            for(int i=c1;i<=c2;++i)
            {
                res.add(matrix[r1][i]);
            }
            for(int j=r1+1;j<=r2;++j)
            {
                res.add(matrix[j][c2]);
            }
            if(c1<c2&&r1<r2)
            {
                for(int i=c2-1;i>c1;--i)
                {
                    res.add(matrix[r2][i]);
                }
                for(int j=r2;j>r1;--j)
                {
                    res.add(matrix[j][c1]);
                }
            }
            ++r1;
            ++c1;
            --r2;
            --c2;
        }
        return res;
    }

    /*
    public List<Integer> spiralOrder(int[][] matrix) {
        List ans = new ArrayList();
        if (matrix.length == 0) return ans;
        int R = matrix.length, C = matrix[0].length;
        boolean[][] seen = new boolean[R][C];
        int[] dr = {0, 1, 0, -1};
        int[] dc = {1, 0, -1, 0};
        int r = 0, c = 0, di = 0;
        for (int i = 0; i < R * C; i++) {
            ans.add(matrix[r][c]);
            seen[r][c] = true;
            int cr = r + dr[di];
            int cc = c + dc[di];
            if (0 <= cr && cr < R && 0 <= cc && cc < C && !seen[cr][cc]){
                r = cr;
                c = cc;
            } else {
                di = (di + 1) % 4;
                r += dr[di];
                c += dc[di];
            }
        }
        return ans;
    }
     */
}
