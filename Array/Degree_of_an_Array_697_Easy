public class Degree_of_an_Array_697_Easy {
    public int findShortestSubArray(int[] nums) {
        Map<Integer, int[]> m = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            if (!m.containsKey(nums[i])) m.put(nums[i], new int[]{ i, i, 0 });
            int[] rec = m.get(nums[i]);
            rec[1] = i;//last index
            rec[2]++;//degree count
        }

        int maxDeg = -1, minLen = -1;

        for (int num : m.keySet()) {
            int[] rec = m.get(num);
            int newDeg = rec[2], newLen = rec[1] - rec[0] + 1;
            if (rec[2] > maxDeg) {
                maxDeg = newDeg;
                minLen = newLen;
            }
            if (rec[2] == maxDeg && newLen < minLen) minLen = newLen;
        }

        return minLen;
    }
    /*
    Double HashMap
     */
    HashMap<Integer,Integer> count=new HashMap<>(),firstPlace=new HashMap<>();
    public int findShortestSubArray2(int[] nums) {
        int res=0,degree=0;
        for(int i=0;i<nums.length;++i)
        {
            firstPlace.putIfAbsent(nums[i],i);
            count.put(nums[i],count.getOrDefault(nums[i],0)+1);
            if(count.get(nums[i])>degree) {
                degree = count.get(nums[i]);
                res=i- firstPlace.get(nums[i])+1;
            }
            else if(count.get(nums[i])==degree)
                res= Math.min(res,i-firstPlace.get(nums[i])+1);
        }
        return res;
    }
}
