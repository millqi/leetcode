public class Subarray_Sum_Equals_K_560_Medium {
    /*
    Time O(N)
    Space O(N)
   example[1,1,-1,1]  k=1  ans=5
   nums[i]    sum     ans    0    1    2
   -          -       0      1    -    -     Initialise:preSum.put(0,1) means use nothing
   1          1       1      1    -    -     First Sum+=1,then preSum contains (0,1),so it means we don't need any preSum to let the subarray equal to k(nums[0]-nums[before 0])
   1          2       2      2    1    -     Sum+=1,then preSum contains (1,1),so it means we could use [1,1] - [1] to let the subarray equal to k
   -1         1       3      1    2    -     Sum-=1,then preSum contains (0,1),so it means we could use [1,1,-1] - [] to let the subarray equal to k
   1          2       5      1    2    1     Sum+=1,then preSum contains (1,2),so it means there are 2 ways to let the subarray equal to k,[1,1,-1,1]-[1] and [1,1,-1,1]-[1,1,-1]
   then we could get the answer 5
     */
    public int subarraySum(int[] nums, int k) {
        Map<Integer,Integer> preSum=new HashMap<>();
        int sum=0,result=0;
        preSum.put(0,1);

        for(int i=0;i<nums.length;++i)
        {
            sum+=nums[i];
            if(preSum.containsKey(sum-k))
                result+=preSum.get(sum-k);
            preSum.put(sum,preSum.getOrDefault(sum,0)+1);
        }
        return result;
    }
}
