/*Given numbers [2, 3, 4, 5], regarding the third number 4, the product of array except 4 is 2*3*5 which consists of two parts: left 2*3 and right 5. The product is left*right. We can get lefts and rights:

        Numbers:     2    3    4     5
        Lefts:            2  2*3 2*3*4
        Rights:  3*4*5  4*5    5
        Letâ€™s fill the empty with 1:

        Numbers:     2    3    4     5
        Lefts:       1    2  2*3 2*3*4
        Rights:  3*4*5  4*5    5     1
        We can calculate lefts and rights in 2 loops. The time complexity is O(n).

        We store lefts in result array. If we allocate a new array for rights. The space complexity is O(n). To make it O(1), we just need to store it in a variable*/
public class ProductExceptSelf_238_Medium {
    /*public int[] productExceptSelf(int[] nums) {
        int res[]=new int[nums.length];
        res[0]=1;
        for(int i=1;i<nums.length;i++)
        {
            res[i]=nums[i-1]*res[i-1];
        }
        int right=1;
        for(int i=nums.length-1;i>=0;i--){
            res[i]*=right;
            right*=nums[i];
        }
        return res;
    }*/
    public int[] productExceptSelf(int[] nums) {
        int[] result = new int[nums.length];
        int[] prefixProduct = new int[nums.length];
        int[] suffixProduct = new int[nums.length];

        prefixProduct[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            prefixProduct[i] = prefixProduct[i - 1] * nums[i];
        }

        suffixProduct[nums.length - 1] = nums[nums.length - 1];
        for (int i = nums.length - 2; i >= 0; i--) {
            suffixProduct[i] = suffixProduct[i + 1] * nums[i];
        }

        for (int i = 0; i < nums.length; i++) {
            if (i == 0) {
                result[i] = suffixProduct[i + 1];
            } else if (i == nums.length - 1) {
                result[i] = prefixProduct[i - 1];
            } else {
                result[i] = prefixProduct[i - 1] * suffixProduct[i + 1];
            }
        }

        return result;
    }
}
