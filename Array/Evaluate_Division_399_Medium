public class Evaluate_Division_399_Medium {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        Map<String,Map<String,Double>> graph=buildGraph(equations,values);
        int n=equations.size(),m=queries.size();
        double res[]=new double[m];
        for(int i=0;i<m;++i)
        {
            res[i]=getPathWeight(queries.get(i).get(0),queries.get(i).get(1),new HashSet<>(),graph);
        }

        return res;

    }
    private double getPathWeight(String start, String end, Set<String> visited, Map<String, Map<String, Double>> graph) {
        if(!graph.containsKey(start))
        {
            return -1.0;
        }
        if(graph.get(start).containsKey(end))
            return graph.get(start).get(end);

        visited.add(start);
        //如寻找 a/b/c  a/b  b/c
        //a的除数只有b，若end！=c，则a进入到b中寻找b的除数有无c
        //有则返回到factor
        for(Map.Entry<String ,Double> element:graph.get(start).entrySet())
        {
            if(!visited.contains(element.getKey()))
            {
                double factor=getPathWeight(element.getKey(),end,visited,graph);
                if(factor!=-1.0)
                    return element.getValue()*factor;
            }
        }
        return -1.0;//Not Found
    }
    private Map<String, Map<String, Double>> buildGraph(List<List<String>> equations, double[] values) {
        Map<String,Map<String,Double>> graph=new HashMap<>();
        for(int i=0;i<equations.size();++i)
        {
            String u=equations.get(i).get(0),v=equations.get(i).get(1);
            graph.putIfAbsent(u, new HashMap<>());
            graph.get(u).put(v, values[i]);
            graph.putIfAbsent(v, new HashMap<>());
            graph.get(v).put(u, 1 / values[i]);

        }
        return graph;

    }
}
