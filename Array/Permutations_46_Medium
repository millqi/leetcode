public class Permutations_46_Medium {
    List<List<Integer>> res=new ArrayList<>();
    public List<List<Integer>> permute(int[] nums) {
        backTrack(nums,new ArrayList<>());
        return res;
    }
    private void backTrack(int[] nums,List<Integer> temp)
    {
        if(temp.size()==nums.length)
        {
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int i=0;i<nums.length;++i)
        {
            if(temp.contains(nums[i]))continue;
            temp.add(nums[i]);
            backTrack(nums,temp);
            temp.remove(temp.size()-1);
        }
    }
    /*
    Using a boolean array visited instead of contains() is Faster
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> output = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        DFS(output, path, visited, nums);
        return output;
    }
    
    private static void DFS(List<List<Integer>> output, List<Integer> path, boolean[] visited, int[] nums){
        if(path.size()==nums.length){
            output.add(new ArrayList<>(path));
            return;
        }else{
            for(int i = 0; i<nums.length; i++){
                if(visited[i]==true)
                    continue;
                visited[i] =true;
                path.add(nums[i]);
                DFS(output, path, visited, nums);
                visited[i] =false;
                path.remove(path.size()-1);                
            }
        }
        return;
    } 
     */
}
