public class Candy_135_Hard {
    //DP
    public int candy3(int[] ratings) {
        if(ratings.length==0) return 0;
        int res=1;
        int up=0,down=0,peak=0;
        /*
        [0, 1, 20, 9, 8, 7]
        up 连续增大的子数列的长度，随着i递增时，第i个孩子需要第i-1个孩子的糖果数+1
        peak 连续增大后的数列的长度（除开up中第一个元素） 1，20 即为2
        down 连续递减的子数列的长度，当i递增时，当down<=peak时，每往后给一个孩子糖果，需要为前面down个孩子补充一颗糖果
         */
        for(int i=1;i<ratings.length;++i)
        {
            if(ratings[i]>ratings[i-1])
            {
                peak= ++up;
                down=0;
                res+=up+1;
            }
            else if(ratings[i]==ratings[i-1])
            {
                up=down=peak=0;
                res+=1;
            }
            else {
                ++down;
                up=0;
                res+=1+down+(peak>=down? -1:0);
            }
        }
        return res;
    }
    //PreSum 2ms
    public int candy(int[] ratings) {

        int[] candies = new int[ratings.length];
        Arrays.fill(candies, 1);
        for (int i = 1; i < ratings.length; i++) {
            if (ratings[i] > ratings[i - 1]) {
                candies[i] = candies[i - 1] + 1;
            }
        }
        // System.out.println(Arrays.toString(candies));
        // System.out.println(Arrays.toString(ratings));
        int sum = candies[ratings.length - 1];
        for (int i = ratings.length - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i + 1]) {
                candies[i] = Math.max(candies[i], candies[i + 1] + 1);
            }
            sum += candies[i];
        }
        // System.out.println(Arrays.toString(candies));
        // System.out.println(Arrays.toString(ratings));
        return sum;
    }
    public int candy2(int[] ratings) {
        int count=0;
        int n=ratings.length;
        int left[]=new int[n];
        int right[]=new int[n];
        left[0]=1;
        right[n-1]=1;
        //left
        for(int i=1;i<ratings.length;++i)
        {
            if(ratings[i]>ratings[i-1])
            {
                left[i]=left[i-1]+1;

            }
            else if(ratings[i]==ratings[i-1]){
                left[i]= 1;

            }
            else{
                if(left[i-1]==1)
                {
                    left[i-1]++;
                    left[i]=1;
                }
                else{
                    left[i]=1;
                }
            }
        }
        //right
        for(int i=n-2;i>=0;--i)
        {
            if(ratings[i]>ratings[i+1])
            {
                right[i]=right[i+1]+1;

            }
            else if(ratings[i]==ratings[i+1]){
                right[i]= 1;

            }
            else{
                if(right[i+1]==1)
                {
                    right[i+1]++;
                    right[i]=1;
                }
                else{
                    right[i]=1;
                }
            }
        }
        for(int i=0;i<n;++i)
        {
            count+=Math.max(left[i],right[i]);
        }
        return count;
    }
}
