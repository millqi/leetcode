public class Top_K_Frequent_Words_692_Medium {
    /*
    5ms
     */
    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String,Integer> map=new HashMap<>();
        for(String s:words)
        {
            if(!map.containsKey(s))
                map.put(s,1);
            else map.put(s,map.get(s)+1);
        }
        ArrayList<String > res=new ArrayList<>();

        PriorityQueue<Map.Entry<String,Integer>> pr=new PriorityQueue<>((a,b)->a.getValue()==b.getValue()?b.getKey().compareTo(a.getKey()):a.getValue()-b.getValue());

        for(Map.Entry<String,Integer> entry:map.entrySet())
        {
            pr.offer(entry);
            if(pr.size()>k) pr.poll();
        }

        while(!pr.isEmpty())
        {
            res.add(0,pr.poll().getKey());
        }
        return res;
    }
    /* 4ms
    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String, Integer> map = new HashMap<>();
        for (String w : words) {
            map.put(w, map.getOrDefault(w, 0) + 1);
        }

        PriorityQueue<String> maxHeap = new PriorityQueue<String>(new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                if (map.get(o1) == map.get(o2))
                    return o1.compareTo(o2);
                return map.get(o2) - map.get(o1);
            }
        });
        maxHeap.addAll(map.keySet());
        List<String> result = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (!maxHeap.isEmpty())
                result.add(maxHeap.poll());
        }
        return result;
    }
     */
}
