public class Longest_Substring_Without_Repeating_Characters_3_Medium {
    public int lengthOfLongestSubstring2(String s) {
        if(s.length()==0) return 0;
        HashMap<Character,Integer> map=new HashMap<Character,Integer>();
        int max=0;
        for(int end=0,frt=0;end<s.length();++end)
        {
            if(map.containsKey(s.charAt(end)))
            {
                frt=Math.max(frt,map.get(s.charAt(end))+1);
                /*
                case 1: its index < frt, then our start index should still be frt because it is no longer included in the calculation of the length of the string; case 2: index >= frt, then our start index should be (index + 1).
                 if we don't check for max(j, map.get(s.charAt(i)) + 1), then it will not return the longest substring but will consider it as a subsequence.
                 Example:
                 String s = "abbba"
                 In this when i = 4=> j = 1 (j = map.get(s.charAt(i))+ 1) => max = 4 - 1 + 1 = 4 => MAX = 4 => which is wrong as ANSWER = 2
                 */
            }
            map.put(s.charAt(end),end);
            max=Math.max(max,end-frt+1);
        }
        return max;
    }
    public int lengthOfLongestSubstring(String s) {
        int frt=0,end=0,minLen=0,counter=0;
        int map[]=new int[128];
        
        while(end<s.length())
        {
            final char c1=s.charAt(end);
            if(map[c1]>0) counter++;
            map[c1]++;
            end++;
            while(counter>0)
            {
                final char c2=s.charAt(frt);
                if(map[c2]>1) counter--;
                map[c2]--;
                frt++;
            }
            minLen=Math.max(minLen,end-frt);
        }
        return minLen;
    }
}
