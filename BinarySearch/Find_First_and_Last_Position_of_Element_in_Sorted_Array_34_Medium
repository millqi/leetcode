public class Find_First_and_Last_Position_of_Element_in_Sorted_Array_34_Medium {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = {-1,-1};
        int start = searchIndex(nums,target,true);
        int end = searchIndex(nums,target,false);
        ans[0] = start;
        ans[1] = end;

        return ans;
    }
    int searchIndex(int[] nums, int target,boolean firstStartIndex){
        int ans=-1;
        int start = 0;
        int end = nums.length-1;

        while(start<=end){
            int mid = start + (end- start) /2;
            if(target<nums[mid]){
                end = mid-1;

            }else if(target>nums[mid])
            {
                start = mid+1;
            }
            else {
                ans = mid; // it means we again implement binary search to find the first
//                 occurrence and then last occurrence
                if(firstStartIndex)
                {
                    end = mid-1;
                }else
                {
                    start = mid +1;
                }
            }

        }
        return ans;
    }
    /*
    AC Space beats 18%
     */
    public int[] searchRange2(int[] nums, int target) {
        if(nums.length==0) return new int[]{-1,-1};
        int frt=0,end=nums.length-1;
        while(frt<end&&nums[frt]!=nums[end])
        {
            int mid=frt+(end-frt)/2;
            if(target>nums[mid])
            {
                frt=mid+1;
            }
            else if(target<nums[mid])
            {
                end=mid;
            }
            else {
                frt = mid;
                break;
            }
        }
        if(nums[frt]!=target)
        {
            return new int[]{-1,-1};
        }
        int head=frt,tail=frt;
        while(head-1>=0&&nums[head-1]==target)
            --head;
        while(tail+1<nums.length&&nums[tail+1]==target)
            ++tail;
        return new int[]{head,tail};
    }
}
