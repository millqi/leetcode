public class Balance_a_Binary_Search_Tree_1382_Medium {
    //DSW Day–Stout–Warren algorithm
    int makeVine(TreeNode grand) {
        int cnt = 0;
        var n = grand.right;
        while (n != null) {
            if (n.left != null) {
                var old_n = n;
                n = n.left;
                old_n.left = n.right;
                n.right = old_n;
                grand.right = n;
            }
            else {
                ++cnt;
                grand = n;
                n = n.right;
            }
        }
        return cnt;
    }
    void compress(TreeNode grand, int m) {
        var n = grand.right;
        while (m-- > 0) {
            var old_n = n;
            n = n.right;
            grand.right = n;
            old_n.right = n.left;
            n.left = old_n;
            grand = n;
            n = n.right;
        }
    }
    public TreeNode balanceBST(TreeNode root) {
        TreeNode grand = new TreeNode(0);
        grand.right = root;
        int cnt = makeVine(grand);
        int m = (int)Math.pow(2, (int)(Math.log(cnt + 1) / Math.log(2))) - 1;
        compress(grand, cnt - m);
        for (m = m / 2; m > 0; m /= 2)
            compress(grand, m);
        return grand.right;
    }
    //Rebuild
    // M1: preorder + recontruct tree
    // Time O(n)
    // Space O(n)
    public TreeNode balanceBST2(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        getList(root, list);
        return buildBST(list, 0, list.size() - 1);
    }

    // Time O(n)
    // Space O(logn)
    private TreeNode buildBST(List<Integer> list, int left, int right) {
        if (left > right) return null;
        int mid = left + (right - left) / 2;
        TreeNode root = new TreeNode(list.get(mid));
        root.left = buildBST(list, left, mid - 1);
        root.right = buildBST(list, mid + 1, right);
        return root;
    }

    // Time O(n)
    // Space O(n)
    private void getList(TreeNode root, List<Integer> list) {
        if (root == null) return;
        getList(root.left, list);
        list.add(root.val);
        getList(root.right, list);
    }
}
