public class Binary_Search_Tree_Iterator_173_Medium {
    /*
        Morris Traversal
        Time O(n) Space O(1)
    */
    class BSTIterator {
        TreeNode cur,prev;
        public BSTIterator(TreeNode root) {
            cur=root;
            prev=null;
        }

        public int next() {

            int val;
            while(cur!=null)
            {
                if(cur.left==null)
                {
                    val= cur.val;
                    cur=cur.right;
                    return val;
                }
                else {
                    prev=cur.left;
                    while(prev.right!=null&&prev.right!=cur)
                        prev=prev.right;

                    if(prev.right==null)
                    {
                        prev.right=cur;
                        cur=cur.left;
                    }
                    else {
                        val= cur.val;
                        prev.right=null;
                        cur=cur.right;
                        return val;
                    }
                }
            }
            return -1;
        }

        public boolean hasNext() {
            return cur!=null;
        }
    }
    class BSTIterator2 {

        /*
        Stack
        Time O(1) Space O(n)
         */
        Stack<TreeNode> stack;
        TreeNode cur;
        public BSTIterator2(TreeNode root) {
            stack = new Stack<>();
            cur = root;
        }

        public int next() {
            while(cur!=null||!stack.isEmpty())//replace the hasnext to speedup
            {
                while(cur!=null)
                {
                    stack.add(cur);
                    cur=cur.left;
                }
                cur=stack.pop();
                int res= cur.val;
                cur=cur.right;
                return res;
            }
            return -1;
        }

        public boolean hasNext() {
            return cur!=null||!stack.isEmpty();
        }
    }
}
