public class Largest_BST_Subtree_333_Medium {
    // return array for each node:
    //     [0] --> min
    //     [1] --> max
    //     [2] --> largest BST in its subtree(inclusive)
    public int largestBSTSubtree(TreeNode root) {
        return find(root)[2];
    }
    public int[] find(TreeNode root)
    {
        if(root==null) return new int[]{Integer.MAX_VALUE,Integer.MIN_VALUE,0};
        int left[]=find(root.left);
        int right[]=find(root.right);
        if(root.val>left[1]&&root.val<right[0])
            return new int[]{Math.min(left[0], root.val),Math.max(root.val,right[1]),left[2]+right[2]+1};
        else return new int[]{Integer.MIN_VALUE,Integer.MAX_VALUE,Math.max(left[2],right[2])};//Stop counting for the recursion
    }
}
