public class Serialize_and_Deserialize_BST_449_Medium {
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb=new StringBuilder();
        serialize(root,sb);
        return sb.toString();
    }
    public void serialize(TreeNode root,StringBuilder sb) {
        if(root==null) return;
        sb.append(root.val).append(",");
        serialize(root.left,sb);
        serialize(root.right,sb);
    }
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.isEmpty()) return null;
        Queue<String > queue=new LinkedList<>(Arrays.asList(data.split(",")));
        return deserialize(queue,Integer.MIN_VALUE,Integer.MAX_VALUE);
    }
    public TreeNode deserialize(Queue<String > q,int low,int high) {
        if(q.isEmpty()) return null;
        String s=q.peek();
        int i=Integer.parseInt(s);
        if(i<low||i>high)
        {
            return null;
        }
        q.poll();
        TreeNode root=new TreeNode(i);
        root.left=deserialize(q,low,i);
        root.right=deserialize(q,i,high);
        return root;
    }
}
