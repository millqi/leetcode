public class Unique_Binary_Search_Trees_96_Medium {
    /*
    Math Catalan Numbers
    公式一：h(n)= h(0)*h(n-1)+h(1)*h(n-2) + ... + h(n-1)*h(0) (n>=2)

公式二：h(n)=h(n-1)*(4*n-2)/(n+1)

公式三：h(n)=C(2n,n)/(n+1) (n=0,1,2,...)

公式四：h(n)=c(2n,n)-c(2n,n-1)(n=0,1,2,...)
————————————————

    example n=5, then we have options:
left subtree has 0 nodes, root = 1, and right subtree has 4 nodes, number of options f[0]*f[4]
left subtree has 1 nodes, root = 2, and right subtree has 3 nodes, number of options f[1]*f[3]
left subtree has 2 nodes, root = 3, and right subtree has 2 nodes, number of options f[2]*f[2]
left subtree has 3 nodes, root = 4, and right subtree has 1 nodes, number of options f[3]*f[1]
left subtree has 4 nodes, root = 5, and right subtree has 0 nodes, number of options f[4]*f[0]
So, in total f[5] = f[0]*f[4] + f[1]*f[3] + f[2]*f[2] + f[3]*f[1] + f[4]*f[0], and in general:
f[n] = f[0]*f[n-1] + f[1]*f[n-2] + ... + f[n-2]*f[1] + f[n-1]*f[0].
卡特兰数 Catalan Numbers:

     */
    public int numTrees1(int n) {
        // Note: we should use long here instead of int, otherwise overflow
        long C = 1;
        for (int i = 0; i < n; ++i) {
            C = C * 2 * (2 * i + 1) / (i + 2);
        }
        return (int) C;
    }
    /*
    O(n2)
     */
    public int numTrees(int n) {
        int res[]=new int[n+1];
        res[0]=1;res[1]=1;
        for(int i=2;i<=n;++i)
        {
            for(int j=1;j<=i;j++)
            {
                res[i]+=res[j-1]*res[i-j];
            }
        }
        return res[n];
    }
}
