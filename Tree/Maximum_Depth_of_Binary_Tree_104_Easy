public class Maximum_Depth_of_Binary_Tree_104_Easy {
    /*
    simplified
    but use more space
     */
    public int maxDepth(TreeNode root) {
        return  root==null?0:(1+Math.max(maxDepth(root.left),maxDepth(root.right)));
    }

    /*
    Recursion
     */

    public int maxDepth2(TreeNode root) {
        if(root==null) return 0;
        int left=0,right=0;
        if(root.left!=null)
            left=maxDepth(root.left,1);
        if(root.right!=null)
            right=maxDepth(root.right,1);
        return 1+Math.max(left,right);
    }
    public int maxDepth(TreeNode root,int count) {
        int left=count,right=count;
        if(root.left!=null)
            left=maxDepth(root.left,count+1);
        if(root.right!=null)
            right=maxDepth(root.right,count+1);
        return Math.max(left,right);
    }
    /* BFS
    public int maxDepth(TreeNode root) {
    if(root == null) {
        return 0;
    }
    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);
    int count = 0;
    while(!queue.isEmpty()) {
        int size = queue.size();
        while(size-- > 0) {
            TreeNode node = queue.poll();
            if(node.left != null) {
                queue.offer(node.left);
            }
            if(node.right != null) {
                queue.offer(node.right);
            }
        }
        count++;
    }
    return count;
}
     */
    /* DFS
    public int maxDepth(TreeNode root) {
    if(root == null) {
        return 0;
    }

    Stack<TreeNode> stack = new Stack<>();
    Stack<Integer> value = new Stack<>();
    stack.push(root);
    value.push(1);
    int max = 0;
    while(!stack.isEmpty()) {
        TreeNode node = stack.pop();
        int temp = value.pop();
        max = Math.max(temp, max);
        if(node.left != null) {
            stack.push(node.left);
            value.push(temp+1);
        }
        if(node.right != null) {
            stack.push(node.right);
            value.push(temp+1);
        }
    }
    return max;
}
     */

}
