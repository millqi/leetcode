public class Maximum_Subarray_53_Easy {
    //DP
    /*public int maxSubArray(int[] nums) {
        int res=0;
        int[ ] dp=new int[nums.length];
        dp[0]=nums[0];
        res=dp[0];

        for(int i=1;i<nums.length;i++)
        {
            dp[i]=nums[i]+(dp[i-1]>0?dp[i-1]:0);
            res=Math.max(res,dp[i]);
        }

        return res;
    }*/

    //Divide and Conquer
    public int maxSubArray(int[] nums) {
        return maxSubArray(nums,0,nums.length-1);
    }
    public int maxSubArray(int[] nums,int l,int r)
    {
        if(l>r)
            return Integer.MIN_VALUE;
        int mid=l+(r-l)/2;
        int midLeft=0,midRight=0;
        int leftMax=maxSubArray(nums,l,mid-1);
        int rightMax=maxSubArray(nums,mid+1,r);
        for(int i=mid-1,sum=0;i>=l;i--)
        {
            sum+=nums[i];
            midLeft=Math.max(midLeft,sum);
        }
        for(int i=mid+1,sum=0;i<=r;i++){
            sum+=nums[i];
            midRight=Math.max(midRight,sum);
        }
        return Math.max(Math.max(leftMax,rightMax),midLeft+midRight+nums[mid]);
    }

}
