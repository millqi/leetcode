public class Number_of_Islands_200_Medium {
    /*
    Union Find
     */
    int uf[];
    public int numIslands(char[][] grid) {
        if(grid.length==0) return 0;
        int m=grid.length,n=grid[0].length;
        uf=new int[m*n];
        Arrays.fill(uf,-1);
        for(int i=0;i<m;++i)
        {
            for(int j=0;j<n;++j)
            {
                if(grid[i][j]=='1')
                {
                    uf[i*n+j]=i*n+j;
                    if(i>0&&grid[i-1][j]=='1') union(i*n+j,(i-1)*n+j);
                    if(j>0&&grid[i][j-1]=='1') union(i*n+j-1,i*n+j);
                }
            }
        }
        Set<Integer> set=new HashSet<>();
        for(int i=0;i<uf.length;++i)
        {
            if(uf[i]!=-1)
                set.add(find(i));
        }
        return set.size();
    }
    public int find(int i)
    {
        while(i!=uf[i])
        {
            uf[i]=uf[uf[i]];
            i=uf[i];
        }
        return i;
    }
    public void union(int i,int j)
    {
        int root1=find(i);
        int root2=find(j);
        uf[root1]=uf[root2];
    }




    /*
    DFS
     */
    public int numIslands2(char[][] grid) {
        int count=0;
        for(int i=0;i<grid.length;++i)
        {
            for(int j=0;j<grid[0].length;++j)
            {
                if(grid[i][j]=='1')
                {
                    dfs(grid,i,j);
                    ++count;
                }
            }
        }
        return count;
    }
    public void dfs(char[][] grid,int x,int y) {
        if(x<0||y<0||x>= grid.length||y>= grid[0].length) return ;
        if(grid[x][y]=='0') return ;
        else
        {
            grid[x][y]='0';
            dfs(grid,x-1,y);
            dfs(grid,x,y+1);
            dfs(grid,x,y-1);
            dfs(grid,x+1,y);
        }
        return ;
    }
}
